import os
import uuid

from sqlalchemy.orm import Session
from sqlalchemy import select
from dreamflask.libs.sd_logger import SD_Logger, logger_levels
from dreamflask.models.sd_model import *

GENERATED = 'generated'
WORKBENCH = 'workbench'
THUMBNAIL = 'thumbnail'
PLAYGROUND = 'playground'

def get_file_info_as_dict(engine, filename=None, hash=None):
	
	if (not filename and not hash):
		return {'error' : 'need filename or hash'}

	# Check the DB for the file using filename or hash
	with Session(self._engine) as session:
		file_info_resp = session.execute(select(FileInfo).where(FileInfo.filename==self._filename)).fetchone()

		if (not file_info_resp or len(file_info_resp) < 1):
			file_info_resp = session.execute(select(FileInfo).where(FileInfo.id==self._hash)).fetchone()

		# Create and/or collect info
		if (file_info_resp and len(file_info_resp) == 1):
			self._file_info = file_info_resp[0].as_dict()
		else:
			self._file_info = self.insert_file_info()
	


def __init__(self, filename=None, owner_id=None, engine=None, hash=None, reference=None):
		self._filename = filename
		self._owner_id = owner_id
		self._engine = engine
		self._hash = hash
		self._reference = reference
		self._file_info = {}
		self._basename = ''
		self._filetype = ''

		self._logger = SD_Logger(__name__.split(".")[-1], logger_levels.INFO)
		self.info = self._logger.info
		self.debug = self._logger.debug

	# The same file_info object can be reinitialized with a hash or filename
	def init(self, hash=None, filename=None, create=False):
		self.info(f"init filename: {self._filename} Hash: [{self._hash}]")


		# Check the DB for the file using filename or hash
		with Session(self._engine) as session:
			file_info_resp = session.execute(select(FileInfo).where(FileInfo.filename==self._filename)).fetchone()

			if (not file_info_resp or len(file_info_resp) < 1):
				file_info_resp = session.execute(select(FileInfo).where(FileInfo.id==self._hash)).fetchone()

			# Create and/or collect info
			if (file_info_resp and len(file_info_resp) == 1):
				self._file_info = file_info_resp[0].as_dict()
			else:
				self._file_info = self.insert_file_info()

		if self._filename.find('img-samples') > -1:
			self._filetype = GENERATED
		elif self._filename.find('img-workbench') > -1:
			self._filetype = WORKBENCH
		elif self._filename.find('img-thumbnails') > -1:
			self._filetype = THUMBNAIL
		elif self._filename.find('img-playground') > -1:
			self._filetype = PLAYGROUND

		self._file_info['basename'] = os.path.basename(self._file_info['filename'])

		return self._file_info

	def insert_file_info(self):
		self.info(f"inserting file: {self.filename}")

		with Session(self._engine) as session:
			stats = os.stat(self.filename)
			new_file_info = FileInfo(
				filename = self.filename,
				filetype = self.filetype,
				c_time = stats.st_ctime,
				a_time = stats.st_atime,
				m_time = stats.st_mtime,
				show_meta = False,
				show_owner = False,
				size = stats.st_size,
				owner_id = self._owner_id,
				thumbnail = self._reference.id if self._reference else None)
			session.add(new_file_info)
			session.commit()
			
			return new_file_info.as_dict()

	def update_fileinfo(self, rehash=False):
		# TODO: Remove this record
		if (not os.path.exists(self._filename)):
			self.info(f'File does not exist: {self._filename}')
			return None

		# TODO: Rehash file info
		if (rehash):
			pass

		self.info(f"Updating file: {self._filename}")

	def exists(self):
		return os.path.exists(self.filename)
	
	def has_thumbnail(self):
		return len(self.thumbnail) > 0

	def is_thumbnail(self):
		return self.filetype == THUMBNAIL

	@property
	def ctime(self):
		return self._file_info.get('c_time', -1)
	
	@property
	def atime(self):
		return self._file_info.get('a_time', -1)

	@property
	def mtime(self):
		return self._file_info.get('m_time', -1)

	@property
	def size(self):
		return self._file_info.get('size', -1)

	@property
	def hash(self):
		return self._file_info.get('id', -1)

	@property
	def thumbnail(self):
		return self._file_info.get('thumbnail', '')

	@property
	def metadata(self):
		return self.file_info.get('meta', '')

	@property
	def filename(self):
		return self._filename

	@property
	def basename(self):
		return self._basename

	@property
	def filetype(self):
		return self._filetype

if __name__ == '__main__':
	fh = file_info('../screenshot.png')